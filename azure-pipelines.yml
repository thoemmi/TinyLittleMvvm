# .NET Desktop

# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

pool:
  vmImage: 'windows-latest'

variables:
  projects: '**/*.csproj'
  projectsToPublish: '**/TinyLittleMvvm.csproj;**/templatepack.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@0
  displayName: Install NuGet

- task: NuGetCommand@2
  displayName: Install GitVersion
  inputs:
    command: 'custom'
    arguments: 'install GitVersion.CommandLine -ExcludeVersion -PreRelease -OutputDirectory $(Build.BinariesDirectory)/tools'
    
- task: CmdLine@2
  displayName: Determine build number
  inputs:
    script: '$(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/GitVersion.exe /output buildserver /nofetch'

- task: DotNetCoreCLI@2
  displayName: Restore NuGet packages
  inputs:
    command: 'restore'
    projects: '$(projects)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Build projects
  inputs:
    command: 'build'
    projects: '$(projects)'
    configuration: '$(buildConfiguration)'
    arguments: '/p:Configuration=$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Create NuGet packages
  inputs:
    command: 'pack'
    configuration: '$(buildConfiguration)'
    packDirectory: '$(Build.ArtifactStagingDirectory)'
    packagesToPack: '$(projectsToPublish)'
    versioningScheme: 'off'

- task: NuGetCommand@2
  displayName: Publish NuGet packages
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet.org'